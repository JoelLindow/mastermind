class Messages

  def instructions
   banner = "    *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
          __   __ ___    _____ ______ ______ ____   __  ___ ____ _   __ ____
         /  |/  //   |  / ___//_  __// ____// __  )/  |/  //  _// | / // __  )
        / /|_/ // /| |  L__  ) / /  / __/  / /_/ // /|_/ / / / /  |/ // / / /
       / /  / // ___ | ___/ / / /  / /___ / _, _// /  / /_/ / / /|  // /_/ /
      /_/  /_//_/  |_|/____/ /_/  /_____//_/ |_|/_/  /_//___//_/ |_//_____/

      Mastermind is a game where you must try to guess the secret combination.
      The combination will be randomly generated by the computer. Your goal
      will be to guess this secret combination in as few guesses as possible.

    You will be using 4 different colored pegs. The randomly generated combination
    will also be made up of the same pegs:(R)ed, (G)reen, (B)lue and (Y)ellow.
    For example the computer might generate a secret code of 'RRRR' which you will
    not be able to see. You start by guessing a 4 peg combination such as 'RRBG'.
    The program will compare your guess with the randomly generated combo and let
    you know how close your guess was. You may use the clues provided to continue
    guessing until you have guessed the correct combination.

         Crack the code! Feel the rush! Save the world! This is Mastermind!
    *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

    "
    banner
  end

  def start_game_prompt

    "I have generated a beginner sequence with four elements made up of:\n
    (r)ed, (g)reen, (b)lue, and (y)ellow. Use (q)uit at any time to end the game.\n
    What's your guess?"
  end

  def main_menu
    "Welcome to MASTERMIND\n\nWould you like to (p)lay, read the (i)nstructions, or (q)uit?"
  end

  def wrong_guess(current_guess, correct_colors, correct_positions, guess_counter)
  "'#{current_guess.join}' has #{correct_colors} of the correct elements with #{correct_positions} in the correct positions
You've taken #{guess_counter} guess
  Keep (p)laying or (q)uit?"
  end

  def correct_guess(current_guess)
  "Congratulations! You guessed the sequence '#{current_guess.join}' in 8 guesses over 4 minutes,
  22 seconds.

  Do you want to (p)lay again or (q)uit?"
  end

  def not_option_message
    "That is not an option. Please try again."
  end

  def what_next_guess
    "What's your Next Guess?"
  end

  def goodbye
    "Goodbye"
  end
end
